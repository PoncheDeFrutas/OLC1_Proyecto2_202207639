// * Hello
// ! Error
// ? Question
// TODO: To Do
// FIXME: Arreglar
//// tachao


// ? Imports and JavaScript Code
%{

%}


// * Lexical Analyzer
%lex
%options case-insensitive

%%

[ \t\n]                                     /* skip */

[0-9]+[.][0-9]+\b                           return 'DOUBLE'
[0-9]+\b                                    return 'INT'

"true"|"false"                              return 'BOOL'
"int"|"double"|"bool"|"char"|"std::string"  return 'DATA_TYPE'

// TODO: realizar las expresiones regulares para los string y char

([a-zA-Z])[a-zA-Z0-9]*                      return 'ID'

"\\n"|"\\\\"|'\\"'|"\\t"|"\\'"              return 'ESCAPE_CHAR'


<<EOF>>                                     return 'EOF'

. {
    console.log('Caracter no valido: ' + yytext);
}

/lex
// * End Lexical Analyzer


// ? Precedence
//%left
//%right


// * Syntax Analyzer
%start program

// * Grammar
%%

program
    : statement_list EOF
    ;

statement_list
    : statement_list statement
    | statement
    ;

statement
    : INT
    | DOUBLE
    | ID
    | DATA_TYPE
    | ESCAPE_CHAR
    | BOOL
    ;