/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,26],$V2=[1,16],$V3=[1,22],$V4=[1,23],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,24],$Va=[1,21],$Vb=[5,20,26,30,34,35,36,37,38,39,43,47,50,52,87],$Vc=[1,34],$Vd=[1,45],$Ve=[1,53],$Vf=[1,46],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,65],$Vs=[5,20,21,26,30,34,35,36,37,38,39,43,47,50,52,62,67,76,78,79,80,81,82,83,84,85,86,87],$Vt=[10,24],$Vu=[1,73],$Vv=[1,72],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[10,24,29,40,51,62,63,64,65,66,68,69,70,71,72,73,74,75,77],$VJ=[10,29,31],$VK=[10,24,29,40,51,74,75,77],$VL=[5,20,26,30,34,35,36,37,38,39,43,47,50,52,87,89],$VM=[10,24,29,40,51,62,63,68,69,70,71,72,73,74,75,77],$VN=[10,24,29,40,51,68,69,70,71,72,73,74,75,77],$VO=[10,24,29,40,51],$VP=[47,52],$VQ=[1,161],$VR=[47,50,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,"functions":7,"var_cases":8,"increment_decrement":9,"SEMICOLON":10,"transfer_sentence":11,"fn_count":12,"fn_if":13,"fn_while":14,"fn_DoWhile":15,"fn_Switch":16,"fn_for":17,"var_edition":18,"var_declaration":19,"FOR":20,"LPAREN":21,"expression":22,"actualization":23,"RPAREN":24,"block":25,"TYPE":26,"var_list":27,"end_declaration":28,"COMMA":29,"ID":30,"ASSIGN":31,"INC":32,"DEC":33,"WHILE":34,"DO":35,"RETURN":36,"BREAK":37,"CONTINUE":38,"COUT":39,"INSERTION":40,"end_count":41,"ENDL":42,"SWITCH":43,"LBRACE":44,"case_l":45,"fn_default":46,"RBRACE":47,"case_list":48,"cases":49,"CASE":50,"COLON":51,"DEFAULT":52,"operations":53,"relational":54,"logical":55,"ternary":56,"casting":57,"toLowUp":58,"round":59,"ToString":60,"data_type":61,"RES":62,"SUM":63,"MUL":64,"DIV":65,"MOD":66,"POW":67,"EQ":68,"NEQ":69,"LT":70,"LEQ":71,"GT":72,"GEQ":73,"AND":74,"OR":75,"NOT":76,"TERNARY":77,"TOLOWER":78,"TOUPPER":79,"ROUND":80,"TOSTRING":81,"NUMBER":82,"DOUBLE":83,"BOOL":84,"CHAR":85,"STRING":86,"IF":87,"fn_else":88,"ELSE":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"SEMICOLON",20:"FOR",21:"LPAREN",24:"RPAREN",26:"TYPE",29:"COMMA",30:"ID",31:"ASSIGN",32:"INC",33:"DEC",34:"WHILE",35:"DO",36:"RETURN",37:"BREAK",38:"CONTINUE",39:"COUT",40:"INSERTION",42:"ENDL",43:"SWITCH",44:"LBRACE",47:"RBRACE",50:"CASE",51:"COLON",52:"DEFAULT",62:"RES",63:"SUM",64:"MUL",65:"DIV",66:"MOD",67:"POW",68:"EQ",69:"NEQ",70:"LT",71:"LEQ",72:"GT",73:"GEQ",74:"AND",75:"OR",76:"NOT",77:"TERNARY",78:"TOLOWER",79:"TOUPPER",80:"ROUND",81:"TOSTRING",82:"NUMBER",83:"DOUBLE",84:"BOOL",85:"CHAR",86:"STRING",87:"IF",89:"ELSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,2],[8,2],[17,8],[23,1],[23,1],[19,3],[27,3],[27,1],[28,0],[28,2],[9,2],[9,2],[18,3],[14,5],[15,6],[11,3],[11,2],[11,2],[12,4],[41,1],[41,3],[16,8],[45,1],[45,0],[48,2],[48,1],[49,4],[46,3],[46,0],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[53,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,6],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[55,3],[55,3],[55,2],[56,5],[57,4],[58,4],[58,4],[59,4],[60,4],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[13,6],[88,2],[88,2],[88,0],[25,3],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]); 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 17: case 18: case 23: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 82: case 83:
 this.$ = $$[$0]; 
break;
case 6: case 14: case 15: case 52:
 this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 19:
 this.$ = new Declaration($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 20:
 $$[$0-2].push($$[$0].toLowerCase()); this.$ = $$[$0-2]; 
break;
case 21:
 this.$ = [$$[$0].toLowerCase()]; 
break;
case 22: case 42: case 84:
 this.$ = null; 
break;
case 24:
 this.$ = new IncDecFunction($$[$0-1].toLowerCase(), true, _$[$0].first_line, _$[$0].first_column); 
break;
case 25:
 this.$ = new IncDecFunction($$[$0-1].toLowerCase(), false, _$[$0].first_line, _$[$0].first_column); 
break;
case 26:
 this.$ = new newValue($$[$0-2].toLowerCase(), $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 27:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 28:
 this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 29:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 31:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 32:
 this.$ = new Cout($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 33:
 this.$ = false; 
break;
case 34:
 this.$ = true; 
break;
case 35:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 36:
 this.$ = $$[$0];
break;
case 37:
 this.$ = null;
break;
case 38:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 39:
 this.$ = [$$[$0]];
break;
case 40:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 41:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOp.UMINUS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 54:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.SUM, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 55:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.RES, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.MUL, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.DIV, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 58:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.MOD, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = new Arithmetic($$[$0-3], $$[$0-1], ArithmeticOp.POW, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.EQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 61:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.NEQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.LT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.LEQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.GT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.GEQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new Logical($$[$0-2], $$[$0], LogicalOp.AND, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
 this.$ = new Logical($$[$0-2], $$[$0], LogicalOp.OR, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new Logical($$[$0], $$[$0], LogicalOp.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 69:
 this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 70:
 this.$ = new Casting($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 71:
 this.$ = new toLowUp($$[$0-1], true, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 72:
 this.$ = new toLowUp($$[$0-1], false, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 73:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 74:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 75:
 this.$ = new IdValue($$[$0].toLowerCase() ,_$[$0].first_line, _$[$0].first_column); 
break;
case 76:
 this.$ = new Primitive($$[$0], dataType.NUMBER ,_$[$0].first_line, _$[$0].first_column); 
break;
case 77:
 this.$ = new Primitive($$[$0], dataType.DOUBLE ,_$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$ = new Primitive($$[$0], dataType.BOOL ,_$[$0].first_line, _$[$0].first_column); 
break;
case 79:
 this.$ = new Primitive($$[$0], dataType.CHAR ,_$[$0].first_line, _$[$0].first_column); 
break;
case 80:
 this.$ = new Primitive($$[$0], dataType.STRING ,_$[$0].first_line, _$[$0].first_column); 
break;
case 81:
 this.$ = new FN_IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 85:
 this.$ = new Block($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new Block([], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,87:$Va},{1:[3]},{5:[1,27],6:28,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,87:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),{10:[1,29]},o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),{10:[1,30]},{10:[1,31]},{31:$Vc,32:[1,32],33:[1,33]},{21:$Vd,22:35,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{10:[1,59]},{10:[1,60]},{40:[1,61]},{21:[1,62]},{21:[1,63]},{25:64,44:$Vr},{21:[1,66]},{21:[1,67]},{27:68,30:[1,69]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,6]),o($Vs,[2,14]),o($Vs,[2,15]),o($Vt,[2,24]),o($Vt,[2,25]),{21:$Vd,22:70,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{10:[1,71],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},o($VI,[2,43]),o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46]),o($VI,[2,47]),o($VI,[2,48]),o($VI,[2,49]),o($VI,[2,50]),o($VI,[2,51]),{21:$Vd,22:86,26:[1,87],30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:88,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:[1,89]},{21:$Vd,22:90,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:[1,91]},{21:[1,92]},{21:[1,93]},{21:[1,94]},o($VI,[2,75]),o($VI,[2,76]),o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,79]),o($VI,[2,80]),o($Vb,[2,30]),o($Vb,[2,31]),{21:$Vd,22:95,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:96,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:97,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{34:[1,98]},{4:99,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,47:[1,100],87:$Va},{21:$Vd,22:101,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{8:102,18:14,19:15,26:$V1,30:[1,103]},{10:[2,22],28:104,29:[1,105],31:[1,106]},o($VJ,[2,21]),o($Vt,[2,26],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH}),o($Vb,[2,29]),{21:$Vd,22:107,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:108,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:109,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:110,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:111,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:112,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:113,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:114,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:115,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:116,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:117,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:118,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:119,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:120,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{24:[1,121],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,122]},o($VI,[2,53]),{21:$Vd,22:123,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VK,[2,68],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{21:$Vd,22:124,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:125,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:126,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{21:$Vd,22:127,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{10:[1,129],40:[1,130],41:128,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,131],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,132],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{21:[1,133]},{6:28,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,47:[1,134],87:$Va},o($VL,[2,86]),{24:[1,135],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{21:$Vd,22:136,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{31:$Vc},{10:[2,19]},{30:[1,137]},{21:$Vd,22:138,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VM,[2,54],{64:$Vw,65:$Vx,66:$Vy}),o($VM,[2,55],{64:$Vw,65:$Vx,66:$Vy}),o($VI,[2,56]),o($VI,[2,57]),o($VI,[2,58]),o($VN,[2,60],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VN,[2,61],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VN,[2,62],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VN,[2,63],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VN,[2,64],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VN,[2,65],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VK,[2,66],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o([10,24,29,40,51,75,77],[2,67],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF}),{51:[1,139],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},o($VI,[2,52]),{21:$Vd,22:140,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{29:[1,141],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,142],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,143],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,144],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{24:[1,145],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},o($Vb,[2,32]),o($Vb,[2,33]),{42:[1,146]},{25:147,44:$Vr},{25:148,44:$Vr},{21:$Vd,22:149,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VL,[2,85]),{44:[1,150]},{10:[1,151],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},o($VJ,[2,20]),{10:[2,23],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{21:$Vd,22:152,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VO,[2,70],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH}),{21:$Vd,22:153,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VI,[2,71]),o($VI,[2,72]),o($VI,[2,73]),o($VI,[2,74]),{10:[1,154]},o($Vb,[2,84],{88:155,89:[1,156]}),o($Vb,[2,27]),{24:[1,157],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},o($VP,[2,37],{45:158,48:159,49:160,50:$VQ}),{9:164,18:163,23:162,30:$V2},o($VO,[2,69],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH}),{24:[1,165],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},o($Vb,[2,34]),o($Vb,[2,81]),{13:167,25:166,44:$Vr,87:$Va},o($Vb,[2,28]),{46:168,47:[2,42],52:[1,169]},o($VP,[2,36],{49:170,50:$VQ}),o($VR,[2,39]),{21:$Vd,22:171,30:$Ve,53:36,54:37,55:38,56:39,57:40,58:41,59:42,60:43,61:44,62:$Vf,67:$Vg,76:$Vh,78:$Vi,79:$Vj,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{24:[1,172]},{24:[2,17]},{24:[2,18]},o($VI,[2,59]),o($Vb,[2,82]),o($Vb,[2,83]),{47:[1,173]},{51:[1,174]},o($VR,[2,38]),{51:[1,175],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,77:$VH},{25:176,44:$Vr},o($Vb,[2,35]),{4:177,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,87:$Va},{4:178,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,87:$Va},o($Vb,[2,16]),{6:28,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,47:[2,41],87:$Va},o($VR,[2,40],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,6:28,20:$V0,26:$V1,30:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,43:$V9,87:$Va})],
defaultActions: {27:[2,1],104:[2,19],163:[2,17],164:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Arithmetic } = require('../js/Expression/Arithmetic');
    const { Relational } = require('../js/Expression/Relational');
    const { Logical } = require('../js/Expression/Logical');
    const { Ternary } = require('../js/Expression/Ternary');
    const { Primitive } = require('../js/Expression/Primitive');
    const { Casting } = require('../js/Expression/Casting');
    const { toLowUp } = require('../js/Expression/toLowUp');
    const { Round } = require('../js/Expression/Round');
    const { ToString } = require('../js/Expression/ToString');
    const { ArithmeticOp, RelationalOp, LogicalOp, Result, dataType } = require('../js/Expression/Result');
    const { Cout } = require('../js/Instruction/Cout');
    const { Block } = require('../js/Instruction/Block');
    const { Declaration } = require('../js/Instruction/Declaration');
    const { IdValue } = require('../js/Instruction/IdValue');
    const { FN_IF } = require('../js/Instruction/Control/IF');
    const { While } = require('../js/Instruction/While');
    const { DoWhile } = require('../js/Instruction/DoWhile');
    const { Break } = require('../js/Instruction/Break');
    const { Continue } = require('../js/Instruction/Continue');
    const { Return } = require('../js/Instruction/Return');
    const { Switch } = require('../js/Instruction/Switch');
    const { Case } = require('../js/Instruction/Case');
    const { Default } = require('../js/Instruction/Default');
    const { For } = require('../js/Instruction/For');
    const { IncDecFunction } = require('../js/Instruction/IncDecFunction');
    const { newValue } = require('../js/Instruction/newValue');
    const { AST } = require('../js/AST');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignore Comments*/
break;
case 1:/*Ignore Comments*/
break;
case 2:/*Ignore Whitespaces*/
break;
case 3:return 83;
break;
case 4:return 82;
break;
case 5:return 39;
break;
case 6:return 40;
break;
case 7:return 42;
break;
case 8:return 87;
break;
case 9:return 89;
break;
case 10:return 78;
break;
case 11:return 79;
break;
case 12:return 80;
break;
case 13:return 35;
break;
case 14:return 34;
break;
case 15:return 36;
break;
case 16:return 37;
break;
case 17:return 38;
break;
case 18:return 81;
break;
case 19:return 43;
break;
case 20:return 50;
break;
case 21:return 52;
break;
case 22:return 20;
break;
case 23:return 32;
break;
case 24:return 33;
break;
case 25:return 63;
break;
case 26:return 62;
break;
case 27:return 64;
break;
case 28:return 65;
break;
case 29:return 67;
break;
case 30:return 66;
break;
case 31:return 68;
break;
case 32:return 69;
break;
case 33:return 71;
break;
case 34:return 73;
break;
case 35:return 70;
break;
case 36:return 72;
break;
case 37:return 75;
break;
case 38:return 74;
break;
case 39:return 76;
break;
case 40:return 29;
break;
case 41:return 21;
break;
case 42:return 24;
break;
case 43:return 44;
break;
case 44:return 47;
break;
case 45:return 'LBRACKET';
break;
case 46:return 'RBRACKET';
break;
case 47:return 31;
break;
case 48:return 10;
break;
case 49:return 77;
break;
case 50:return 51;
break;
case 51:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 85;
break;
case 52:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 86;
break;
case 53:return 84;
break;
case 54:return 26;
break;
case 55:return 30;
break;
case 56:return 5
break;
case 57:console.error("Error: Caracter inesperado: " + yy_.yytext + " Linea: " + yy_.yylloc.first_line + " Columna: " + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+\/\*([^*]|\*+[^*/])*\*+\/)/i,/^(?:\/\/.*[\n])/i,/^(?:[ \t\r\n]+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:std::tostring\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:;)/i,/^(?:\?)/i,/^(?::)/i,/^(?:'([^\']|[\t]|[\n]|[\r]|[ ])')/i,/^(?:"([^\"]|[\t]|[\n]|[\r])*")/i,/^(?:false|true\b)/i,/^(?:int|double|bool|char|std::string\b)/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}