/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,33],$V2=[1,20],$V3=[1,29],$V4=[1,30],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,27],$V9=[1,31],$Va=[1,28],$Vb=[1,34],$Vc=[5,22,28,32,36,37,38,39,40,41,45,49,52,54,92,103],$Vd=[1,45],$Ve=[1,43],$Vf=[1,41],$Vg=[1,42],$Vh=[1,57],$Vi=[1,65],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,78],$Vw=[5,22,23,28,32,36,37,38,39,40,41,45,49,52,54,65,70,79,81,82,83,84,85,86,87,88,89,92,103],$Vx=[11,26],$Vy=[1,91],$Vz=[1,90],$VA=[1,92],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[11,26,31,42,53,65,66,67,68,69,71,72,73,74,75,76,77,78,80,91],$VN=[11,31,33],$VO=[2,23],$VP=[26,31],$VQ=[11,26,31,42,53,77,78,80,91],$VR=[5,22,28,32,36,37,38,39,40,41,45,49,52,54,92,94,103],$VS=[2,116],$VT=[1,171],$VU=[11,26,31,42,53,65,66,71,72,73,74,75,76,77,78,80,91],$VV=[11,26,31,42,53,71,72,73,74,75,76,77,78,80,91],$VW=[11,26,31,42,53,91],$VX=[49,54],$VY=[1,208],$VZ=[49,52,54],$V_=[31,91],$V$=[2,102],$V01=[1,244];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement":6,"functions":7,"var_cases":8,"vectors":9,"increment_decrement":10,"SEMICOLON":11,"transfer_sentence":12,"general_functions":13,"fn_count":14,"fn_if":15,"fn_while":16,"fn_DoWhile":17,"fn_Switch":18,"fn_for":19,"var_edition":20,"var_declaration":21,"FOR":22,"LPAREN":23,"expression":24,"actualization":25,"RPAREN":26,"block":27,"TYPE":28,"var_list":29,"end_declaration":30,"COMMA":31,"ID":32,"ASSIGN":33,"INC":34,"DEC":35,"WHILE":36,"DO":37,"RETURN":38,"BREAK":39,"CONTINUE":40,"COUT":41,"INSERTION":42,"end_count":43,"ENDL":44,"SWITCH":45,"LBRACE":46,"case_l":47,"fn_default":48,"RBRACE":49,"case_list":50,"cases":51,"CASE":52,"COLON":53,"DEFAULT":54,"operations":55,"relational":56,"logical":57,"ternary":58,"casting":59,"toLowUp":60,"round":61,"ToString":62,"data_type":63,"function_value":64,"RES":65,"SUM":66,"MUL":67,"DIV":68,"MOD":69,"POW":70,"EQ":71,"NEQ":72,"LT":73,"LEQ":74,"GT":75,"GEQ":76,"AND":77,"OR":78,"NOT":79,"TERNARY":80,"TOLOWER":81,"TOUPPER":82,"ROUND":83,"TOSTRING":84,"NUMBER":85,"DOUBLE":86,"BOOL":87,"CHAR":88,"STRING":89,"LBRACKET":90,"RBRACKET":91,"IF":92,"fn_else":93,"ELSE":94,"vectors_declaration":95,"vector_modification":96,"NEW":97,"value_list":98,"list_value_list":99,"function_declaration":100,"method_declaration":101,"parameter_cases":102,"VOID":103,"value_list2":104,"non_empty_value_list":105,"parameter_list":106,"parameter":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"SEMICOLON",22:"FOR",23:"LPAREN",26:"RPAREN",28:"TYPE",31:"COMMA",32:"ID",33:"ASSIGN",34:"INC",35:"DEC",36:"WHILE",37:"DO",38:"RETURN",39:"BREAK",40:"CONTINUE",41:"COUT",42:"INSERTION",44:"ENDL",45:"SWITCH",46:"LBRACE",49:"RBRACE",52:"CASE",53:"COLON",54:"DEFAULT",65:"RES",66:"SUM",67:"MUL",68:"DIV",69:"MOD",70:"POW",71:"EQ",72:"NEQ",73:"LT",74:"LEQ",75:"GT",76:"GEQ",77:"AND",78:"OR",79:"NOT",80:"TERNARY",81:"TOLOWER",82:"TOUPPER",83:"ROUND",84:"TOSTRING",85:"NUMBER",86:"DOUBLE",87:"BOOL",88:"CHAR",89:"STRING",90:"LBRACKET",91:"RBRACKET",92:"IF",94:"ELSE",97:"NEW",103:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,2],[8,2],[19,8],[25,1],[25,1],[21,3],[29,3],[29,1],[30,0],[30,2],[10,2],[10,2],[20,3],[16,5],[17,6],[12,3],[12,2],[12,2],[14,4],[43,1],[43,3],[18,8],[47,1],[47,0],[50,2],[50,1],[51,4],[48,3],[48,0],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[55,2],[55,3],[55,3],[55,3],[55,3],[55,3],[55,6],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[57,3],[57,3],[57,2],[58,5],[59,4],[60,4],[60,4],[61,4],[62,4],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,4],[63,7],[15,6],[93,2],[93,2],[93,0],[27,3],[27,2],[9,2],[9,1],[95,10],[95,15],[95,8],[95,10],[96,7],[96,10],[99,5],[99,3],[98,0],[98,3],[98,1],[13,1],[13,1],[13,2],[100,6],[101,6],[104,0],[104,1],[105,3],[105,1],[64,4],[102,1],[102,0],[106,3],[106,1],[107,2],[107,4],[107,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]); 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 23: case 104: case 113: case 118:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 19: case 20: case 25: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 87: case 88: case 93: case 111: case 115:
 this.$ = $$[$0]; 
break;
case 7: case 16: case 17: case 55: case 92:
 this.$ = $$[$0-1]; 
break;
case 18:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 21:
 this.$ = new Declaration($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 22: case 103: case 112: case 117:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 24: case 44: case 89:
 this.$ = null; 
break;
case 26:
 this.$ = new IncDecFunction($$[$0-1], true, _$[$0].first_line, _$[$0].first_column); 
break;
case 27:
 this.$ = new IncDecFunction($$[$0-1], false, _$[$0].first_line, _$[$0].first_column); 
break;
case 28:
 this.$ = new newValue($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 29:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 30:
 this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 31:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 32:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 33:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 34:
 this.$ = new Cout($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 35:
 this.$ = false; 
break;
case 36:
 this.$ = true; 
break;
case 37:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 38:
 this.$ = $$[$0];
break;
case 39:
 this.$ = null;
break;
case 40:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 41:
 this.$ = [$$[$0]];
break;
case 42:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 43:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOp.UMINUS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.SUM, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 58:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.RES, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.MUL, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.DIV, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 61:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOp.MOD, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$ = new Arithmetic($$[$0-3], $$[$0-1], ArithmeticOp.POW, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 63:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.EQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.NEQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.LT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.LEQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.GT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOp.GEQ, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 69:
 this.$ = new Logical($$[$0-2], $$[$0], LogicalOp.AND, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 70:
 this.$ = new Logical($$[$0-2], $$[$0], LogicalOp.OR, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 71:
 this.$ = new Logical($$[$0], $$[$0], LogicalOp.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 72:
 this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 73:
 this.$ = new Casting($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 74:
 this.$ = new toLowUp($$[$0-1], true, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 75:
 this.$ = new toLowUp($$[$0-1], false, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 76:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 77:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 78:
 this.$ = new IdValue($$[$0] ,_$[$0].first_line, _$[$0].first_column); 
break;
case 79:
 this.$ = new Primitive($$[$0], dataType.NUMBER ,_$[$0].first_line, _$[$0].first_column); 
break;
case 80:
 this.$ = new Primitive($$[$0], dataType.DOUBLE ,_$[$0].first_line, _$[$0].first_column); 
break;
case 81:
 this.$ = new Primitive($$[$0], dataType.BOOL ,_$[$0].first_line, _$[$0].first_column); 
break;
case 82:
 this.$ = new Primitive($$[$0], dataType.CHAR ,_$[$0].first_line, _$[$0].first_column); 
break;
case 83:
 this.$ = new Primitive($$[$0], dataType.STRING ,_$[$0].first_line, _$[$0].first_column); 
break;
case 84:
 this.$ = new VectorValue($$[$0-3], $$[$0-1], null,_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 85:
 this.$ = new VectorValue($$[$0-6], $$[$0-4], $$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 86:
 this.$ = new FN_IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 90:
 this.$ = new Block($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Block([], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 94:
 this.$ = new DeclarationVector($$[$0-9], $$[$0-8], $$[$0-3], $$[$0-1], null, true, _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 95:
 this.$ = new DeclarationVector($$[$0-14], $$[$0-13], $$[$0-6], $$[$0-4], $$[$0-1], false, _$[$0-14].first_line, _$[$0-14].first_column); 
break;
case 96:
 this.$ = new DeclarationVector2($$[$0-7], $$[$0-6], $$[$0-1], true, _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 97:
 this.$ = new DeclarationVector2($$[$0-9], $$[$0-8], $$[$0-1], false, _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 98:
 this.$ = new newVectorValue($$[$0-6], $$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 99:
 this.$ = new newVectorValue($$[$0-9], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 100:
 $$[$0-4].push($$[$0-1]); this.$ = $$[$0-4]; 
break;
case 101:
 this.$ = [$$[$0-1]]; 
break;
case 105: case 106:
 this.$ = $$[$0] 
break;
case 107:
 this.$ = $$[$0-1] 
break;
case 108: case 109:
 this.$ = new Function($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 110: case 116:
 this.$ = []; 
break;
case 114:
 this.$ = new FunctionValue($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 119:
 this.$ = {type:$$[$0-1], id:$$[$0],vector:false, simple:false};
break;
case 120:
 this.$ = {type:$$[$0-3], id:$$[$0-2],vector:true, simple:true};
break;
case 121:
 this.$ = {type:$$[$0-5], id:$$[$0-4],vector:true, simple:false};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},{1:[3]},{5:[1,35],6:36,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{11:[1,37]},o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),{11:[1,38]},{11:[1,39]},{11:[1,40]},o($Vc,[2,93]),{23:$Vd,33:$Ve,34:$Vf,35:$Vg,90:[1,44]},{23:$Vh,24:46,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{11:[1,71]},{11:[1,72]},o($Vc,[2,105]),o($Vc,[2,106]),{11:[1,73]},{42:[1,74]},{23:[1,75]},{23:[1,76]},{27:77,46:$Vv},{23:[1,79]},{23:[1,80]},{29:81,32:[1,82]},{32:[1,83]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,7]),o($Vw,[2,16]),o($Vw,[2,17]),o($Vc,[2,92]),o($Vx,[2,26]),o($Vx,[2,27]),{23:$Vh,24:84,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:85,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:88,26:[2,110],32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,104:86,105:87},{11:[1,89],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},o($VM,[2,45]),o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,50]),o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,53]),o($VM,[2,54]),{23:$Vh,24:104,28:[1,105],32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:106,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:[1,107]},{23:$Vh,24:108,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:[1,109]},{23:[1,110]},{23:[1,111]},{23:[1,112]},o($VM,[2,78],{23:$Vd,90:[1,113]}),o($VM,[2,79]),o($VM,[2,80]),o($VM,[2,81]),o($VM,[2,82]),o($VM,[2,83]),o($Vc,[2,32]),o($Vc,[2,33]),o($Vc,[2,107]),{23:$Vh,24:114,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:115,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:116,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{36:[1,117]},{4:118,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,49:[1,119],64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},{23:$Vh,24:120,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{8:121,20:16,21:17,28:[1,123],32:[1,122]},{11:[2,24],30:124,31:[1,125],33:[1,126]},o($VN,$VO,{23:[1,128],90:[1,127]}),{23:[1,129]},o($Vx,[2,28],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,130]},{26:[1,131]},{26:[2,111],31:[1,132]},o($VP,[2,113],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),o($Vc,[2,31]),{23:$Vh,24:133,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:134,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:135,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:136,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:137,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:138,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:139,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:140,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:141,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:142,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:143,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:144,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:145,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:146,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{26:[1,147],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,148]},o($VM,[2,56]),{23:$Vh,24:149,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VQ,[2,71],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI}),{23:$Vh,24:150,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:151,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:152,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:153,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:154,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{11:[1,156],42:[1,157],43:155,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,158],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,159],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{23:[1,160]},{6:36,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,49:[1,161],64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},o($VR,[2,91]),{26:[1,162],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{23:$Vh,24:163,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{33:$Ve},{29:81,32:[1,164]},{11:[2,21]},{32:[1,165]},{23:$Vh,24:166,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{91:[1,167]},{26:$VS,28:$VT,102:168,106:169,107:170},{26:$VS,28:$VT,102:172,106:169,107:170},{33:[1,173],90:[1,174]},o($VM,[2,114]),{23:$Vh,24:175,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VU,[2,57],{67:$VA,68:$VB,69:$VC}),o($VU,[2,58],{67:$VA,68:$VB,69:$VC}),o($VM,[2,59]),o($VM,[2,60]),o($VM,[2,61]),o($VV,[2,63],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VV,[2,64],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VV,[2,65],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VV,[2,66],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VV,[2,67],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VV,[2,68],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VQ,[2,69],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI}),o([11,26,31,42,53,78,80,91],[2,70],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),{53:[1,176],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},o($VM,[2,55]),{23:$Vh,24:177,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{31:[1,178],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,179],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,180],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,181],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{26:[1,182],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,183]},o($Vc,[2,34]),o($Vc,[2,35]),{44:[1,184]},{27:185,46:$Vv},{27:186,46:$Vv},{23:$Vh,24:187,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VR,[2,90]),{46:[1,188]},{11:[1,189],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},o($VN,$VO),o($VN,[2,22]),{11:[2,25],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{33:[1,190],90:[1,191]},{26:[1,192]},{26:[2,115],31:[1,193]},o($VP,[2,118]),{32:[1,194]},{26:[1,195]},{23:$Vh,24:196,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{23:$Vh,24:197,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VP,[2,112],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),{23:$Vh,24:198,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VW,[2,73],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),{23:$Vh,24:199,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,84],{90:[1,200]}),{11:[1,201]},o($Vc,[2,89],{93:202,94:[1,203]}),o($Vc,[2,29]),{26:[1,204],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},o($VX,[2,39],{47:205,50:206,51:207,52:$VY}),{10:211,20:210,25:209,32:[1,212]},{90:[1,214],97:[1,213]},{91:[1,215]},{27:216,46:$Vv},{28:$VT,107:217},o($VP,[2,119],{90:[1,218]}),{27:219,46:$Vv},{11:[1,220],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,221]},o($VW,[2,72],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),{26:[1,222],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{23:$Vh,24:223,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($Vc,[2,36]),o($Vc,[2,86]),{15:225,27:224,46:$Vv,92:$Va},o($Vc,[2,30]),{48:226,49:[2,44],54:[1,227]},o($VX,[2,38],{51:228,52:$VY}),o($VZ,[2,41]),{23:$Vh,24:229,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{26:[1,230]},{26:[2,19]},{26:[2,20]},{33:$Ve,34:$Vf,35:$Vg},{28:[1,231]},o($V_,$V$,{55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,98:232,24:233,23:$Vh,32:$Vi,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),{33:[1,234]},o($Vc,[2,108]),o($VP,[2,117]),{91:[1,235]},o($Vc,[2,109]),o($Vc,[2,98]),{33:[1,236]},o($VM,[2,62]),{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,237]},o($Vc,[2,87]),o($Vc,[2,88]),{49:[1,238]},{53:[1,239]},o($VZ,[2,40]),{53:[1,240],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{27:241,46:$Vv},{90:[1,242]},{31:$V01,91:[1,243]},o($V_,[2,104],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),{90:[1,246],97:[1,245]},o($VP,[2,120],{90:[1,247]}),{23:$Vh,24:248,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($VM,[2,85]),o($Vc,[2,37]),{4:249,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},{4:250,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},o($Vc,[2,18]),{23:$Vh,24:251,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{11:[2,96]},{23:$Vh,24:252,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{28:[1,253]},{90:[1,255],99:254},{91:[1,256]},{11:[1,257],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL},{6:36,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,49:[2,43],64:26,92:$Va,95:18,96:19,100:24,101:25,103:$Vb},o($VZ,[2,42],{7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,95:18,96:19,100:24,101:25,64:26,6:36,22:$V0,28:$V1,32:$V2,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,45:$V9,92:$Va,103:$Vb}),{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,258]},o($V_,[2,103],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL}),{90:[1,259]},{31:[1,261],91:[1,260]},o($V_,$V$,{55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,24:233,98:262,23:$Vh,32:$Vi,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($VP,[2,121]),o($Vc,[2,99]),{11:[2,94]},{23:$Vh,24:263,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},{11:[2,97]},{90:[1,264]},{31:$V01,91:[1,265]},{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,266]},o($V_,$V$,{55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,24:233,98:267,23:$Vh,32:$Vi,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu}),o($V_,[2,101]),{90:[1,268]},{31:$V01,91:[1,269]},{23:$Vh,24:270,32:$Vi,55:47,56:48,57:49,58:50,59:51,60:52,61:53,62:54,63:55,64:56,65:$Vj,70:$Vk,79:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu},o($V_,[2,100]),{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,80:$VL,91:[1,271]},{11:[2,95]}],
defaultActions: {35:[2,1],124:[2,21],210:[2,19],211:[2,20],243:[2,96],258:[2,94],260:[2,97],271:[2,95]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Arithmetic } = require('../js/Expression/Arithmetic');
    const { Relational } = require('../js/Expression/Relational');
    const { Logical } = require('../js/Expression/Logical');
    const { Ternary } = require('../js/Expression/Ternary');
    const { Primitive } = require('../js/Expression/Primitive');
    const { Casting } = require('../js/Expression/Casting');
    const { toLowUp } = require('../js/Expression/toLowUp');
    const { Round } = require('../js/Expression/Round');
    const { ToString } = require('../js/Expression/ToString');
    const { VectorValue } = require('../js/Expression/VectorValue');
    const { ArithmeticOp, RelationalOp, LogicalOp, Result, dataType } = require('../js/Abstract/Result');
    const { Cout } = require('../js/Instruction/Cout');
    const { Block } = require('../js/Instruction/Block');
    const { Declaration } = require('../js/Instruction/Declaration');
    const { DeclarationVector } = require('../js/Instruction/DeclarationVector');
    const { DeclarationVector2 } = require('../js/Instruction/DeclarationVector2');
    const { IdValue } = require('../js/Expression/IdValue');
    const { FN_IF } = require('../js/Instruction/Control/IF');
    const { While } = require('../js/Instruction/While');
    const { DoWhile } = require('../js/Instruction/DoWhile');
    const { Break } = require('../js/Instruction/Break');
    const { Continue } = require('../js/Instruction/Continue');
    const { Return } = require('../js/Instruction/Return');
    const { Switch } = require('../js/Instruction/Switch');
    const { Case } = require('../js/Instruction/Case');
    const { Default } = require('../js/Instruction/Default');
    const { For } = require('../js/Instruction/For');
    const { Function } = require('../js/Instruction/Function');
    const { FunctionValue } = require('../js/Instruction/FunctionValue');
    const { IncDecFunction } = require('../js/Instruction/IncDecFunction');
    const { newValue } = require('../js/Instruction/newValue');
    const { newVectorValue } = require('../js/Instruction/newVectorValue');
    const { AST } = require('../js/AST');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignore Comments*/
break;
case 1:/*Ignore Comments*/
break;
case 2:/*Ignore Whitespaces*/
break;
case 3:return 86;
break;
case 4:return 85;
break;
case 5:return 41;
break;
case 6:return 42;
break;
case 7:return 44;
break;
case 8:return 92;
break;
case 9:return 94;
break;
case 10:return 81;
break;
case 11:return 82;
break;
case 12:return 83;
break;
case 13:return 37;
break;
case 14:return 36;
break;
case 15:return 38;
break;
case 16:return 39;
break;
case 17:return 40;
break;
case 18:return 84;
break;
case 19:return 45;
break;
case 20:return 52;
break;
case 21:return 54;
break;
case 22:return 22;
break;
case 23:return 97;
break;
case 24:return 103;
break;
case 25:return 34;
break;
case 26:return 35;
break;
case 27:return 66;
break;
case 28:return 65;
break;
case 29:return 67;
break;
case 30:return 68;
break;
case 31:return 70;
break;
case 32:return 69;
break;
case 33:return 71;
break;
case 34:return 72;
break;
case 35:return 74;
break;
case 36:return 76;
break;
case 37:return 73;
break;
case 38:return 75;
break;
case 39:return 78;
break;
case 40:return 77;
break;
case 41:return 79;
break;
case 42:return 31;
break;
case 43:return 23;
break;
case 44:return 26;
break;
case 45:return 46;
break;
case 46:return 49;
break;
case 47:return 90;
break;
case 48:return 91;
break;
case 49:return 33;
break;
case 50:return 11;
break;
case 51:return 80;
break;
case 52:return 53;
break;
case 53:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 88;
break;
case 54:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 89;
break;
case 55:return 87;
break;
case 56:return 28;
break;
case 57:return 32;
break;
case 58:return 5
break;
case 59:console.error("Error: Caracter inesperado: " + yy_.yytext + " Linea: " + yy_.yylloc.first_line + " Columna: " + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+\/\*([^*]|\*+[^*/])*\*+\/)/i,/^(?:\/\/.*[\n])/i,/^(?:[ \t\r\n]+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:std::tostring\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:;)/i,/^(?:\?)/i,/^(?::)/i,/^(?:'([^\']|[\t]|[\n]|[\r]|[ ])')/i,/^(?:"([^\"]|[\t]|[\n]|[\r])*")/i,/^(?:false|true\b)/i,/^(?:int|double|bool|char|std::string\b)/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}